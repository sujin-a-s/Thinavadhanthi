generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[] // Optional for WebAuthn support
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  posts         Post[]    
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Post {
  id          String      @id @default(cuid()) 
  title       String
  content     String
  imageUrl    String?
  publicId    String?
  catName     String     @map("cat_name")
  category    Category   @relation(fields: [catName], references: [catName])
  author      User        @relation(fields: [authorEmail], references: [email])
  authorEmail String
  links       String[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("posts") 
}

model Category {
  id      String    @id @default(cuid()) 
  catName String    @unique
  posts   Post[]    
  postIDs String[]
  @@map("categories")
}